%{
#include <cstring>
#include <sstream>
#include <string>
#include "realpaver/Param.hpp"
#include "realpaver/Problem.hpp"
#include "realpaver/SymbolTable.hpp"

#undef YYINITDEPTH
#define YYINITDEPTH 5000

extern char* realpaver_bison_text;
extern int realpaver_bison_lineno;
extern std::string realpaver_parse_error;
extern realpaver::Problem* realpaver_bison_problem;
extern realpaver::Param* realpaver_bison_param;
extern realpaver::SymbolTable* realpaver_bison_symtab;

extern std::vector<realpaver::Variable>* realpaver_var_vector;
extern std::vector<realpaver::Interval>* realpaver_itv_vector;

extern int realpaver_bison_lex(void);
int realpaver_bison_error(const char* str);

extern realpaver::FunctionSymbol* realpaver_fun_symbol;
%}

%define api.prefix {realpaver_bison_}

%code requires
{
#include "realpaver/Constraint.hpp"
#include "realpaver/Exception.hpp"
}

%union
{
  char u_str[256];
  realpaver::TermRep* u_term;
}

%type <u_str>     ident
%type <u_term>    expr
%type <u_term>    const_expr
%type <u_term>    fun_call
%type <u_term>    integer
%type <u_term>    real
%type <u_term>    exponent
%type <u_term>    itv
%type <u_term>    itv_left
%type <u_term>    itv_right
%type <u_term>    table_list_val_def

%token TK_IDENT TK_INT TK_REAL
%token TK_STR_VAR TK_STR_CONST TK_STR_CTR TK_STR_OBJ TK_STR_FUN TK_STR_ALIAS
%token TK_STR_INT TK_STR_TOL TK_STR_BIN
%token TK_TABLE TK_TOL
%token TK_EQ TK_EQ_EQ TK_LE TK_GE TK_IN TK_LT TK_GT
%token TK_PLUS TK_MINUS TK_MUL TK_DIV
%token TK_POW TK_CARET TK_SQR TK_SQRT TK_LOG TK_EXP
%token TK_TAN TK_COS TK_SIN
%token TK_LPAR TK_RPAR TK_LSBR TK_RSBR TK_LCBR TK_RCBR TK_PIPE
%token TK_COMMA TK_SCOLON TK_COLON
%token TK_SGN TK_ABS TK_MIN TK_MAX
%token TK_MINUS_INF TK_PLUS_INF

%left TK_PLUS TK_MINUS
%left TK_MUL TK_DIV
%right TK_UMINUS
%right TK_UPLUS
%right TK_CARET

%start model

%%
model
  : 
  | statement TK_SCOLON model
  ;

statement
  : const_statement
  | var_statement
  | alias_statement
  | ctr_statement
  | obj_statement
  | fun_statement
  ;

const_statement
  : TK_STR_CONST const_list
  ;

const_list
  : const_def const_tail
  ;

const_tail
  :
  | TK_COMMA const_list
  ;

const_def
  : ident TK_EQ const_expr
    {
      realpaver::Term::SharedRep e($3);

      realpaver::Interval x = e->evalConst();
      if (x.isEmpty())
      {
        std::ostringstream os;
        os << "Constant [" << $1 << "] equal to an empty interval";
        realpaver_bison_error(os.str().c_str());
        YYABORT;
      }

      if (realpaver_bison_symtab->hasSymbol($1))
      {
        std::ostringstream os;
        os << "Symbol [" << $1 << "] already used";
        realpaver_bison_error(os.str().c_str());
        YYABORT;         
      }

      realpaver_bison_symtab->insertConstant($1, x);
    }
  ;

var_statement
  : TK_STR_VAR var_list
  ;

var_list
  : var_def var_tail
  ;

var_tail
  :
  | TK_COMMA var_list
  ;

var_def
  : ident
    {
      if (realpaver_bison_symtab->hasSymbol($1))
      {
        std::ostringstream os;
        os << "Symbol [" << $1 << "] already used";
        realpaver_bison_error(os.str().c_str());
        YYABORT;         
      }

      realpaver::Variable v =
         realpaver_bison_problem->addRealVar(realpaver::Interval::universe(),
                                             $1);

      realpaver::Tolerance tol = realpaver_bison_param->getTolParam("XTOL");
      v.setTolerance(tol);

      realpaver_bison_symtab->insertVariable($1, v);
    }
    var_dom
    ;

var_dom
  : TK_STR_BIN
    {
      realpaver::Variable v = realpaver_bison_problem->lastVar();
      //v.setDomain(0, 1); TODOK
      //v.setInteger(); TODOK
      v.setTolerance(realpaver::Tolerance::makeAbs(0.0));

      // the domain must also be assigned in the problem's initial region
      //realpaver_bison_problem->setDomain(v, 0, 1); TODOK
    }
  | TK_IN var_dom_def
  ;
 
var_dom_def
  : itv
    {
		realpaver::Term::SharedRep e($1);
      realpaver::Interval x = e->evalConst();

      if (x.isEmpty())
      {
         realpaver_bison_error("Empty domain");
         YYABORT;
      }

      realpaver::Variable v = realpaver_bison_problem->lastVar();
      //v.setDomain(x); TODOK

      // the domain must also be assigned in the problem's initial region
      // realpaver_bison_problem->setDomain(v, x);  TODOK
	 }
	 var_info
  | TK_LCBR
    {
      if (realpaver_var_vector != nullptr)
         realpaver_var_vector->clear();
      else
        realpaver_var_vector = new std::vector<realpaver::Variable>();

      if (realpaver_itv_vector != nullptr)
         realpaver_itv_vector->clear();
      else
        realpaver_itv_vector = new std::vector<realpaver::Interval>();
	 }
    table_list_val TK_RCBR
    {
      realpaver::Variable v = realpaver_bison_problem->lastVar();
		realpaver_var_vector->push_back(v);


		if (realpaver_itv_vector->size() == 0)
      {
         realpaver_bison_error("Bad initialization of a real variable");
         YYABORT;
      }

      realpaver::Constraint c( table(realpaver_var_vector->data(),
                                     realpaver_var_vector->size(),
                                     realpaver_itv_vector->data(),
                                     realpaver_itv_vector->size()) );

      realpaver_bison_problem->addCtr(c);
 
		// assigns the variable domain
		realpaver::Interval x = realpaver_itv_vector->at(0);
		for (size_t i=1; i<realpaver_itv_vector->size(); ++i)
			x |= realpaver_itv_vector->at(i);

      //v.setDomain(x); TODOK

      // the domain must also be assigned in the problem's initial region
      //realpaver_bison_problem->setDomain(v, x);  TODOK
	 }
  ;

var_info
  :
  | TK_STR_INT
    {
      realpaver::Variable v = realpaver_bison_problem->lastVar();
      //v.setInteger(); TODOK
      v.setTolerance(realpaver::Tolerance::makeAbs(0.0));    
    }
  | TK_STR_TOL TK_TOL
    {
      try
      {
        realpaver::Tolerance tol(realpaver_bison_text);
        realpaver::Variable v = realpaver_bison_problem->lastVar();
        v.setTolerance(tol);
      }
      catch(realpaver::Exception& e)
      {
        realpaver_bison_error("Bad tolerance");
        YYABORT;
      }
    }
  ;

alias_statement
  : TK_STR_ALIAS alias_list
  ;

alias_list
  : alias_def alias_tail
  ;

alias_tail
  :
  | TK_COMMA alias_list
  ;

alias_def
  : ident TK_EQ expr
    {
      realpaver::Term t(realpaver::Term::SharedRep($3));

      if (realpaver_bison_symtab->hasSymbol($1))
      {
        std::ostringstream os;
        os << "Symbol [" << $1 << "] already used";
        realpaver_bison_error(os.str().c_str());
        YYABORT;         
      }

      realpaver_bison_symtab->insertAlias($1, t);
    }
  ;

ctr_statement
  : TK_STR_CTR ctr_list
  ;

ctr_list
  : ctr_def ctr_tail
  ;

ctr_tail
  :
  | TK_COMMA ctr_list
  ;

ctr_def
  : expr TK_EQ_EQ expr
    {
      realpaver::Term lhs(realpaver::Term::SharedRep($1));
      realpaver::Term rhs(realpaver::Term::SharedRep($3));

      realpaver::Constraint c(lhs == rhs);
      realpaver_bison_problem->addCtr(c);
    }
  | expr TK_LE expr
    {
      realpaver::Term lhs(realpaver::Term::SharedRep($1));
      realpaver::Term rhs(realpaver::Term::SharedRep($3));

      realpaver::Constraint c(lhs <= rhs);
      realpaver_bison_problem->addCtr(c);
    }
  | expr TK_GE expr
    {
      realpaver::Term lhs(realpaver::Term::SharedRep($1));
      realpaver::Term rhs(realpaver::Term::SharedRep($3));

      realpaver::Constraint c(lhs >= rhs);
      realpaver_bison_problem->addCtr(c);
    }
  | expr TK_IN itv
    {
      realpaver::Term lhs(realpaver::Term::SharedRep($1));
      realpaver::Term::SharedRep rhs($3);
      realpaver::Interval x = rhs->evalConst();

      if (x.isEmpty())
      {
         realpaver_bison_error("Empty function image");
         YYABORT;
      }
      realpaver::Constraint c(in(lhs, x));
      realpaver_bison_problem->addCtr(c);
    }
  | TK_TABLE
    {
      if (realpaver_var_vector != nullptr)
         realpaver_var_vector->clear();
      else
        realpaver_var_vector = new std::vector<realpaver::Variable>();

      if (realpaver_itv_vector != nullptr)
         realpaver_itv_vector->clear();
      else
        realpaver_itv_vector = new std::vector<realpaver::Interval>();
    }
    TK_LPAR TK_LCBR table_list_var TK_RCBR TK_COMMA    
                     TK_LCBR table_list_val TK_RCBR TK_RPAR
    {
      if (realpaver_var_vector->size() == 0 ||
          realpaver_itv_vector->size() % realpaver_var_vector->size() != 0)
      {
         realpaver_bison_error("Bad initialization of a table constraint");
         YYABORT;
      }

      realpaver::Constraint c( table(realpaver_var_vector->data(),
                                     realpaver_var_vector->size(),
                                     realpaver_itv_vector->data(),
                                     realpaver_itv_vector->size()) );

      realpaver_bison_problem->addCtr(c);
    }
  ;

obj_statement
  : TK_STR_OBJ obj_list
  ;

obj_list
  : obj_def obj_tail
  ;

obj_tail
  :
  | TK_COMMA obj_list
  ;

obj_def
  : TK_MIN expr
    {
      realpaver::Term f(realpaver::Term::SharedRep($2));
      if (f.isConstant())
      {
        realpaver_bison_error("Constant objective function");
        YYABORT;
      }

      realpaver_bison_problem->addObjective(MIN(f));
    }
  | TK_MAX expr
    {
      realpaver::Term f(realpaver::Term::SharedRep($2));
      if (f.isConstant())
      {
        realpaver_bison_error("Constant objective function");
        YYABORT;
      }

      realpaver_bison_problem->addObjective(MAX(f));       
    }
  ;

fun_statement
  : TK_STR_FUN fun_list
  ;

fun_list
  : fun_def fun_tail
  ;

fun_tail
  :
  | TK_COMMA fun_list
  ;

fun_def
  : ident TK_LPAR
    {       
      if (realpaver_bison_symtab->hasSymbol($1))
      {
        std::ostringstream os;
        os << "Symbol [" << $1 << "] already used";
        realpaver_bison_error(os.str().c_str());
        YYABORT;         
      }

      realpaver_fun_symbol = realpaver_bison_symtab->insertFunction($1);
    }
    arg_list TK_RPAR TK_EQ expr
    {
      realpaver::Term t(realpaver::Term::SharedRep($7));
      bool ok = realpaver_fun_symbol->setTerm(t);      
      realpaver_fun_symbol = nullptr;

      if (!ok)
      {
        realpaver_bison_error("Bad variable in a function expression");
        YYABORT;                  
      }
    }
  ;

arg_list
  : arg_def arg_tail
  ;

arg_tail
  :
  | TK_COMMA arg_list
  ;

arg_def
  : ident
    {
      if (realpaver_fun_symbol->hasArgument($1))
      {
        std::ostringstream os;
        os << "Argument [" << $1 << "] already used";
        realpaver_bison_error(os.str().c_str());
        YYABORT;
      }

      realpaver_fun_symbol->addArgument($1);
    }
  ;

table_list_var
  : table_list_var_def table_list_var_tail
  ;

table_list_var_tail
  :
  | TK_COMMA table_list_var
  ;

table_list_var_def
  : ident
    {
      realpaver::VariableSymbol* vs =
         realpaver_bison_symtab->findVariable($1);

      if (vs != nullptr)
      {
         realpaver_var_vector->push_back(vs->getVar());
      }
      else
      {
         std::ostringstream os;
         os << "Identifier [" << $1 << "] not found";
         realpaver_bison_error(os.str().c_str());
         YYABORT;
      }
    }
  ;

table_list_val
  : table_list_val_def
    {
      realpaver::TermConst* cst = static_cast<realpaver::TermConst*>($1);
      realpaver::Interval x(cst->evalConst());
      delete cst;
      
      if (x.isEmpty())
      {
        realpaver_bison_error("Empty interval in a table constraint");
        YYABORT;
      }
      else
      {
        realpaver_itv_vector->push_back(x);
      }
    }
    table_list_val_tail
  ;

table_list_val_tail
  :
  | TK_COMMA table_list_val
  ;

table_list_val_def
  : const_expr
    {
       $$ = $1;
    }
  ;

const_expr
  : expr
    {
      realpaver::TermRep* t = $1;

      if (t->isConstant()) $$ = $1;
      else
      {
        delete t;
        realpaver_bison_error("Expression not constant");
        YYABORT;
      }
    }
  ;

expr
  : expr TK_PLUS expr
    {
      realpaver::Term lhs(realpaver::Term::SharedRep($1)),
                      rhs(realpaver::Term::SharedRep($3)),
                      res(lhs + rhs);
      $$ = res.cloneRoot();
    }
  | expr TK_MINUS expr
    {
      realpaver::Term lhs(realpaver::Term::SharedRep($1)),
                      rhs(realpaver::Term::SharedRep($3)),
                      res(lhs - rhs);
      $$ = res.cloneRoot();
    }
  | expr TK_MUL expr
    {
      realpaver::Term lhs(realpaver::Term::SharedRep($1)),
                      rhs(realpaver::Term::SharedRep($3)),
                      res(lhs * rhs);
      $$ = res.cloneRoot();
    }
  | expr TK_DIV expr
    {
      realpaver::Term lhs(realpaver::Term::SharedRep($1)),
                      rhs(realpaver::Term::SharedRep($3)),
                      res(lhs / rhs);
      $$ = res.cloneRoot();
    }
  | expr TK_CARET expr
    {
      realpaver::Term t(realpaver::Term::SharedRep($1)),
                      e(realpaver::Term::SharedRep($3)),
                      res(pow(t, e));
      $$ = res.cloneRoot();
    }
  | TK_POW TK_LPAR expr TK_COMMA exponent TK_RPAR
    {
      realpaver::Term t(realpaver::Term::SharedRep($3)),
                      d(realpaver::Term::SharedRep($5)),
                      res(pow(t, d.evalConst()));
      $$ = res.cloneRoot();
    }
  | TK_MINUS expr %prec TK_UMINUS
    {
      realpaver::Term t(realpaver::Term::SharedRep($2)),
                      res(-t);
      $$ = res.cloneRoot();
    }
  | TK_PLUS expr %prec TK_UPLUS
    {
       $$ = $2;
    }
  | TK_SQRT TK_LPAR expr TK_RPAR
    {
      realpaver::Term t(realpaver::Term::SharedRep($3)),
                      res(sqrt(t));
      $$ = res.cloneRoot();
    }
  | TK_SQR TK_LPAR expr TK_RPAR
    {
      realpaver::Term t(realpaver::Term::SharedRep($3)),
                      res(sqr(t));
      $$ = res.cloneRoot();
    }
  | TK_SGN TK_LPAR expr TK_RPAR
    {
      realpaver::Term t(realpaver::Term::SharedRep($3)),
                      res(sgn(t));
      $$ = res.cloneRoot();
    }
  | TK_ABS TK_LPAR expr TK_RPAR
    {
      realpaver::Term t(realpaver::Term::SharedRep($3)),
                      res(abs(t));
      $$ = res.cloneRoot();
    }
  | TK_PIPE expr TK_PIPE
    {
      realpaver::Term t(realpaver::Term::SharedRep($2)),
                      res(abs(t));
      $$ = res.cloneRoot();
    }
  | TK_LOG TK_LPAR expr TK_RPAR
    {
      realpaver::Term t(realpaver::Term::SharedRep($3)),
                      res(log(t));
      $$ = res.cloneRoot();
    }
  | TK_EXP TK_LPAR expr TK_RPAR
    {
      realpaver::Term t(realpaver::Term::SharedRep($3)),
                      res(exp(t));
      $$ = res.cloneRoot();
    }
  | TK_COS TK_LPAR expr TK_RPAR
    {
      realpaver::Term t(realpaver::Term::SharedRep($3)),
                      res(cos(t));
      $$ = res.cloneRoot();
    }
  | TK_SIN TK_LPAR expr TK_RPAR
    {
      realpaver::Term t(realpaver::Term::SharedRep($3)),
                      res(sin(t));
      $$ = res.cloneRoot();
    }
  | TK_TAN TK_LPAR expr TK_RPAR
    {
      realpaver::Term t(realpaver::Term::SharedRep($3)),
                      res(tan(t));
      $$ = res.cloneRoot();
    }
  | TK_MIN TK_LPAR expr TK_COMMA expr TK_RPAR
    {
      realpaver::Term fst(realpaver::Term::SharedRep($3)),
                      snd(realpaver::Term::SharedRep($5)),
                      res(MIN(fst, snd));
      $$ = res.cloneRoot();
    }
  | TK_MAX TK_LPAR expr TK_COMMA expr TK_RPAR
    {
      realpaver::Term fst(realpaver::Term::SharedRep($3)),
                      snd(realpaver::Term::SharedRep($5)),
                      res(MAX(fst, snd));
      $$ = res.cloneRoot();
    }
  | TK_LPAR expr TK_RPAR
  {
    $$ = $2;
  }
  | fun_call
    {
      $$ = $1;
    }
  | ident
    {
      bool found = false;

      // an argument?
      if (realpaver_fun_symbol != nullptr &&
          realpaver_fun_symbol->hasArgument($1))
      {
        realpaver::Variable v = realpaver_fun_symbol->getVar($1);
        $$ = new realpaver::TermVar(v);
        found = true;
      }

      if (!found)
      {
        // a constant?
        realpaver::ConstantSymbol* cs =
          realpaver_bison_symtab->findConstant($1);

        if (cs != nullptr)
        {
           $$ = new realpaver::TermConst(cs->getValue());
           found = true;
        }
     }

      if (!found)
      {
        // a variable?
        realpaver::VariableSymbol* vs =
          realpaver_bison_symtab->findVariable($1);

        if (vs != nullptr)
        {
           $$ = new realpaver::TermVar(vs->getVar());
           found = true;
        }
      }

      if (!found)
      {
        // an alias?
        realpaver::AliasSymbol* as = realpaver_bison_symtab->findAlias($1);

        if (as != nullptr)
        {
           $$ = as->getTerm().cloneRoot();
           found = true;
        }
      }

      // symbol not found
      if (!found)
      {
        std::ostringstream os;
        os << "Identifier [" << $1 << "] not found";
        realpaver_bison_error(os.str().c_str());
        YYABORT;
      }
    }
  | integer
    {
      $$ = $1;
    }
  | real
    {
      $$ = $1;
    }
  | itv
    {
       $$ = $1;
    }
  ;

fun_call
  : ident TK_LPAR
    {
      realpaver::FunctionSymbol* fs =
          realpaver_bison_symtab->findFunction($1);

      if (fs == nullptr)
      {
        std::ostringstream os;
        os << "Function [" << $1 << "] not found";
        realpaver_bison_error(os.str().c_str());
        YYABORT;
      }

      realpaver_bison_symtab->pushFunctionCall(fs);
    }
    expr_list TK_RPAR
    {
       std::pair<bool, realpaver::Term> res =
         realpaver_bison_symtab->processFunCall();

       if (res.first)
       {
         $$ = res.second.cloneRoot();
       }
       else
       {
         realpaver_bison_error("Function call invalid");
         YYABORT;          
       }
    }
  ;

expr_list
  : expr
    {
      realpaver::Term t(realpaver::Term::SharedRep($1));
      realpaver_bison_symtab->addFunctionArgument(t);
    }
    expr_tail
  ;

expr_tail
  :
  | TK_COMMA expr_list
  ;

exponent
  : integer
    {
      $$ = $1;
    }
  | real
    {
      $$ = $1;
    }
  ;

integer
  : TK_INT
    {
      try
      {
        std::string str(realpaver_bison_text);
        realpaver::Interval x(str);
        $$ = new realpaver::TermConst(x);
      }
      catch(realpaver::Exception& e)
      {
        realpaver_bison_error("Bad integer value");
        YYABORT;
      }       
    }
  ;

real
  : TK_REAL
    {
      try
      {
        std::string str(realpaver_bison_text);
        realpaver::Interval x(str);
        $$ = new realpaver::TermConst(x);
      }
      catch(realpaver::Exception& e)
      {
        realpaver_bison_error("Bad real number");
        YYABORT;
      }       
    }
  ;

itv
  : TK_LSBR itv_left TK_COMMA itv_right TK_RSBR
    {
      realpaver::Term::SharedRep lo($2);
      realpaver::Term::SharedRep up($4);

      realpaver::Interval x = lo->evalConst();
      realpaver::Interval y = up->evalConst();
      realpaver::Interval z(x.left(), y.right());

      if (z.isEmpty())
      {
        realpaver_bison_error("Empty interval");
        YYABORT;
      }

      $$ = new realpaver::TermConst(z);
    }
  ;

itv_left
  : const_expr
    {
      $$ = $1;
    }
  | TK_MINUS_INF
    {
      // it is necessary to return a non-empty interval with -inf as left bound
      $$ = new realpaver::TermConst(realpaver::Interval::universe());
    }
  ;

itv_right
  : const_expr
    {
      $$ = $1;
    }
  | TK_PLUS_INF
    {
      // it is necessary to return a non-empty interval with +inf as right bound
      $$ = new realpaver::TermConst(realpaver::Interval::universe());
    }
  ;

ident
 : TK_IDENT
   {
     strcpy($$, realpaver_bison_text);
   }
   ;
%%

int realpaver_bison_error(const char* str)
{
  std::ostringstream os;   
  os << "l" << realpaver_bison_lineno << ": " << str;

  realpaver_parse_error = os.str();

  return 0;
}
