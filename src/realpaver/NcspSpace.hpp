/*------------------------------------------------------------------------------
 * Realpaver -- Realpaver is a rigorous nonlinear constraint solver based on
 *              interval computations.
 *------------------------------------------------------------------------------
 * Copyright (c) 2004-2016 Laboratoire d'Informatique de Nantes Atlantique,
 *               France
 * Copyright (c) 2017-2024 Laboratoire des Sciences du Num√©rique de Nantes,
 *               France
 *------------------------------------------------------------------------------
 * Realpaver is a software distributed WITHOUT ANY WARRANTY. Read the COPYING
 * file for information.
 *----------------------------------------------------------------------------*/

/**
 * @file   NcspSpace.hpp
 * @brief  Spaces of NCSP solver
 * @author Laurent Granvilliers
 * @date   2024-4-11
*/

#ifndef REALPAVER_NCSP_SPACE_HPP
#define REALPAVER_NCSP_SPACE_HPP

#include <vector>
#include "realpaver/NcspNode.hpp"
#include "realpaver/NcspSplit.hpp"

namespace realpaver {

/**
 * @brief Base class of spaces of NCSP solver.
 * 
 * A space stores the nodes  generated by branch-and-prune algorithms for
 * solving Numerical CSPs.
 *
 * Two sorts of nodes are stored: the final nodes that are not fathomed during
 * the search (the solutions), and the pending (unexplored) nodes.
 */
class NcspSpace {
public:
   /// Default constructor
   NcspSpace() = default;

   /// Virtual destructor
   virtual ~NcspSpace();

   /// No assignment
   NcspSpace& operator=(const NcspSpace&) = delete;

   /// Default copy constructor
   NcspSpace(const NcspSpace&) = default;

   /// @name Management of solution nodes
   ///@{

   /// Returns the number of solution nodes of this
   virtual size_t nbSolNodes() const = 0;

   /// Inserts a solution node in this
   virtual void pushSolNode(const SharedNcspNode& node) = 0;

   /// Removes a solution node from this
   virtual SharedNcspNode popSolNode() = 0;

   /// Returns the i-th solution node
   virtual SharedNcspNode getSolNode(size_t i) const = 0;

   /// Returns true if a solution node is feasible
   virtual bool hasFeasibleSolNode() const = 0;

   /**
    * @brief Aggregates the solutions that are close enough.
    * 
    * If gap < 0.0 then there is no clustering; if gap = 0.0 then two solutions
    * are replaced by their hull if they overlap; otherwise two solutions
    * are replaced by their hull if their inter-gap is small enough.
    */
   virtual void makeSolClusters(double gap);
   ///@}

   /// @name Management of pending nodes
   ///@{

   /// Returns the number of pending nodes of this
   virtual size_t nbPendingNodes() const = 0;

   /// Extracts the next pending node from this
   virtual SharedNcspNode nextPendingNode() = 0;

   /// Inserts a pending node in this
   virtual void insertPendingNode(const SharedNcspNode& node) = 0;

   /**
    * @brief Inserts a collection of pending nodes in this.
    *
    * The default behavior calls insertPendingNode for each node in
    * the range of iterators.
    */
   virtual void insertPendingNodes(NcspSplit::iterator first,
                                   NcspSplit::iterator last);

   /// Returns the i-th pending node
   virtual SharedNcspNode getPendingNode(size_t i) const = 0;
   ///@}
};

} // namespace

#endif
