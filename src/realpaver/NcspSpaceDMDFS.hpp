///////////////////////////////////////////////////////////////////////////////
// This file is part of Realpaver, an interval constraint and NLP solver.    //
//                                                                           //
// Copyright (c) 2017-2022 LS2N, Nantes                                      //
//                                                                           //
// Realpaver is a software distributed WITHOUT ANY WARRANTY; read the file   //
// COPYING for information.                                                  //
///////////////////////////////////////////////////////////////////////////////

#ifndef REALPAVER_NCSP_SPACE_DMDFS_HPP
#define REALPAVER_NCSP_SPACE_DMDFS_HPP

#include "realpaver/NcspSpace.hpp"

namespace realpaver {

///////////////////////////////////////////////////////////////////////////////
/// This is a space generated by a branch-and-prune algorithm for solving CSPs
/// that implements a Distant-Most Depth-First-Search strategy.
///////////////////////////////////////////////////////////////////////////////
class NcspSpaceDMDFS : public NcspSpace {
public:
   /// Default constructor
   NcspSpaceDMDFS() = default;

   /// Default destructor
   ~NcspSpaceDMDFS() = default;

   /// No assignment
   NcspSpaceDMDFS& operator=(const NcspSpaceDMDFS&) = delete;

   /// Default copy constructor
   NcspSpaceDMDFS(const NcspSpaceDMDFS&) = default;

   ///@{
   size_t nbSolNodes() const override;
   void pushSolNode(const SharedNcspNode& node) override;
   SharedNcspNode popSolNode() override;
   SharedNcspNode getSolNode(size_t i) const override;
   bool hasFeasibleSolNode() const override;
   size_t nbPendingNodes() const override;
   SharedNcspNode nextPendingNode() override;
   void insertPendingNode(const SharedNcspNode& node) override;
   SharedNcspNode getPendingNode(size_t i) const override;
   ///@}

private:
   struct Elem {
      SharedNcspNode node;    // node
      double mindist;         // distance to the closest solution
   };

   struct Comp {
      bool operator()(const Elem& x, const Elem& y)
      {
         return x.mindist < y.mindist;
      }
   } comparator;

   std::vector<Elem> vnode_;           // vector of pending nodes
   std::vector<SharedNcspNode> vsol_;  // vector of solution nodes
};

} // namespace

#endif
