/*------------------------------------------------------------------------------
 * Realpaver -- Realpaver is a rigorous nonlinear constraint solver based on
 *              interval computations.
 *------------------------------------------------------------------------------
 * Copyright (c) 2004-2016 Laboratoire d'Informatique de Nantes Atlantique,
 *               France
 * Copyright (c) 2017-2024 Laboratoire des Sciences du Num√©rique de Nantes,
 *               France
 *------------------------------------------------------------------------------
 * Realpaver is a software distributed WITHOUT ANY WARRANTY. Read the COPYING
 * file for information.
 *------------------------------------------------------------------------------
 * Lexical analyzer used by the parser of nonlinear problems.
 * Author: Laurent Granvilliers
 -----------------------------------------------------------------------------*/

%{
#include <stdio.h>
#include "realpaver/parser_bison.hpp"
#include "realpaver/Param.hpp"
#include "realpaver/Problem.hpp"
#include "realpaver/SymbolTable.hpp"

extern int realpaver_bison_lineno;
%}

%option prefix = "realpaver_bison_"
%option nounput

SPACE       [ \t\r]+
IDENT       [a-zA-Z][a-zA-Z0-9_]*
DIG         [0-9]
INT         {DIG}+
E           [eE][+-]?{DIG}+
REAL        ({DIG}+{E}|{DIG}*"."{DIG}+({E})?|{DIG}+"."{DIG}*({E})?)

%%
{INT}           return TK_INT;
{REAL}          return TK_REAL;

"Variables"     return TK_STR_VAR;
"Constants"     return TK_STR_CONST;
"Aliases"       return TK_STR_ALIAS;
"Constraints"   return TK_STR_CTR;
"Objectives"    return TK_STR_OBJ;
"Functions"     return TK_STR_FUN;

"integer"       return TK_STR_INT;
"binary"        return TK_STR_BIN;
"real"          return TK_STR_REAL;
"tol"           return TK_STR_TOL;
"table"         return TK_TABLE;

"min"    return TK_MIN;
"max"    return TK_MAX;
"MIN"    return TK_MIN;
"MAX"	   return TK_MAX;
"sqr"	   return TK_SQR;
"sqrt"	return TK_SQRT;
"log"    return TK_LOG;
"exp"    return TK_EXP;
"tan"    return TK_TAN;
"cos"    return TK_COS;
"sin"    return TK_SIN;
"sgn"    return TK_SGN;
"abs"    return TK_ABS;
"pow"		return TK_POW;
"cosh"   return TK_COSH;
"sinh"   return TK_SINH;
"tanh"   return TK_TANH;

"in"     return TK_IN;
"-inf"   return TK_MINUS_INF;
"+inf"   return TK_PLUS_INF;

"+"      return TK_PLUS;
"-"      return TK_MINUS;
"*"      return TK_MUL;
"/"      return TK_DIV;
"^"      return TK_CARET;
"("      return TK_LPAR;
")"      return TK_RPAR;
"["      return TK_LSBR;
"]"      return TK_RSBR;
"{"      return TK_LCBR;
"}"      return TK_RCBR;
","      return TK_COMMA;
";"      return TK_SCOLON;
":"      return TK_COLON;
">"      return TK_GT;
"<"      return TK_LT;
"=="     return TK_EQ_EQ;
"="      return TK_EQ;
">="     return TK_GE;
"<="     return TK_LE;
"|"		return TK_PIPE;
"->"     return TK_IMPLY;

{IDENT}     	return TK_IDENT;

"\n"     { ++realpaver_bison_lineno; }

{SPACE}  {}

"#".*    {}
%%

realpaver::Problem* realpaver_bison_problem;
realpaver::SymbolTable* realpaver_bison_symtab;
realpaver::Param* realpaver_bison_param;
realpaver::FunctionSymbol* realpaver_fun_symbol;

// vectors used to parse the table constraints
std::vector<realpaver::Variable>* realpaver_var_vector;
std::vector<realpaver::Interval>* realpaver_itv_vector;

// unions used to parse the variable domains
realpaver::IntervalUnion* realpaver_itv_union;
realpaver::RangeUnion* realpaver_range_union;

// constraint representation used to parse (conditional) constraints
realpaver::ConstraintRep* realpaver_ctr_rep;

YY_BUFFER_STATE realpaver_bison_buffer;
std::string realpaver_parse_error;

void realpaver_flex_init(realpaver::Problem* prob,
							    realpaver::SymbolTable* symtab,
                         realpaver::Param* prm)
{
  realpaver_bison_lineno = 1;
  realpaver_bison_problem = prob;
  realpaver_bison_symtab = symtab;
  realpaver_bison_param = prm;
  realpaver_parse_error = "";
  realpaver_fun_symbol = nullptr;
  realpaver_var_vector = nullptr;
  realpaver_itv_vector = nullptr;
  realpaver_itv_union = nullptr;
  realpaver_range_union = nullptr;
}

void realpaver_flex_init_str(realpaver::Problem* prob,
								     realpaver::SymbolTable* symtab,
                             realpaver::Param* prm,
                             const char* str)
{
  realpaver_flex_init(prob, symtab, prm);
  realpaver_bison_buffer = realpaver_bison__scan_string(str);
}

int realpaver_flex_init_file(realpaver::Problem* prob,
								     realpaver::SymbolTable* symtab,
                             realpaver::Param* prm,
								     const char* filename)
{
  int res = 0;
  realpaver_bison_in = fopen(filename, "r");
  if (!realpaver_bison_in)
  {
    realpaver_parse_error = "File not found";
    res = 1;
  }
  else
  {
    realpaver_flex_init(prob, symtab, prm);
    realpaver_bison_buffer =
      realpaver_bison__create_buffer(realpaver_bison_in, YY_BUF_SIZE);
    realpaver_bison__switch_to_buffer(realpaver_bison_buffer);
  }
  return res;
}

void realpaver_flex_cleanup_str()
{
  realpaver_bison_problem = NULL;
  realpaver_bison_symtab = NULL;
  realpaver_bison_param = NULL;

  if (realpaver_var_vector != nullptr) delete realpaver_var_vector;
  if (realpaver_itv_vector != nullptr) delete realpaver_itv_vector;
  if (realpaver_itv_union != nullptr) delete realpaver_itv_union;
  if (realpaver_range_union != nullptr) delete realpaver_range_union;

  realpaver_bison__delete_buffer(realpaver_bison_buffer);
}

void realpaver_flex_cleanup_file()
{
  realpaver_bison_problem = nullptr;
  realpaver_bison_symtab = nullptr;
  realpaver_bison_param = nullptr;

  if (realpaver_var_vector != nullptr) delete realpaver_var_vector;
  if (realpaver_itv_vector != nullptr) delete realpaver_itv_vector;
  if (realpaver_itv_union != nullptr) delete realpaver_itv_union;
  if (realpaver_range_union != nullptr) delete realpaver_range_union;

  if (realpaver_bison_in)
  {
    fclose(realpaver_bison_in);
    realpaver_bison__delete_buffer(realpaver_bison_buffer);
  }
}

int realpaver_bison_wrap(void)
{
  return 1;
}
