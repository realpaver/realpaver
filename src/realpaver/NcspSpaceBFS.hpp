///////////////////////////////////////////////////////////////////////////////
// This file is part of Realpaver, an interval constraint and NLP solver.    //
//                                                                           //
// Copyright (c) 2017-2022 LS2N, Nantes                                      //
//                                                                           //
// Realpaver is a software distributed WITHOUT ANY WARRANTY; read the file   //
// COPYING for information.                                                  //
///////////////////////////////////////////////////////////////////////////////

#ifndef REALPAVER_NCSP_SPACE_BFS_HPP
#define REALPAVER_NCSP_SPACE_BFS_HPP

#include <list>
#include "realpaver/NcspSpace.hpp"

namespace realpaver {

///////////////////////////////////////////////////////////////////////////////
/// This is a space generated by a branch-and-prune algorithm for solving CSPs
/// that implements a Depth-First-Search strategy.
///////////////////////////////////////////////////////////////////////////////
class NcspSpaceBFS : public NcspSpace {
public:
   /// Default constructor
   NcspSpaceBFS() = default;

   /// Default destructor
   ~NcspSpaceBFS() = default;

   /// No assignment
   NcspSpaceBFS& operator=(const NcspSpaceBFS&) = delete;

   /// Default copy constructor
   NcspSpaceBFS(const NcspSpaceBFS&) = default;

   /// Overrides
   ///@{
   size_t nbSolNodes() const;
   void pushSolNode(const SharedNcspNode& node);
   SharedNcspNode popSolNode();
   SharedNcspNode getSolNode(size_t i) const;
   bool hasFeasibleSolNode() const;
   size_t nbPendingNodes() const;
   SharedNcspNode nextPendingNode();
   void insertPendingNode(const SharedNcspNode& node);
   SharedNcspNode getPendingNode(size_t i) const;
   ///@}

private:
   std::vector<SharedNcspNode> vsol_;    // vector of solution nodes
   std::list<SharedNcspNode> lnode_;     // list of pending nodes
};

} // namespace

#endif
