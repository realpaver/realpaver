///////////////////////////////////////////////////////////////////////////////
// This file is part of Realpaver, an interval constraint and NLP solver.    //
//                                                                           //
// Copyright (c) 2017-2023 LS2N, Nantes                                      //
//                                                                           //
// Realpaver is a software distributed WITHOUT ANY WARRANTY; read the file   //
// COPYING for information.                                                  //
///////////////////////////////////////////////////////////////////////////////

#ifndef REALPAVER_BO_NODE_HPP
#define REALPAVER_BO_NODE_HPP

#include "realpaver/SearchNode.hpp"

namespace realpaver {

///////////////////////////////////////////////////////////////////////////////
/// This is a node of a search tree generated by a Bound Optimization solver.
///
/// A node inherits from the SearchNode class and it stores the following data:
/// - the objective variable;
/// - a lower bound of the objective function in the region;
/// - an upper bound of the objective function in the region.
///////////////////////////////////////////////////////////////////////////////
class BONode : public SearchNode {
public:
   /// Creates a node
   /// @param sco set of variables of the optimization problem
   /// @param ovar variable representing the objective function
   /// @param reg domains of variables
   BONode(const Scope& sco, const Variable& ovar, const IntervalRegion& reg);

   /// Default copy constructor
   BONode(const BONode& node) = default;

   /// No assignment
   BONode& operator=(const BONode& node) = delete;

   /// Default destructor
   ~BONode() = default;

   /// @return the lower bound of the objective function
   double getLower() const;

   /// Sets the lower bound of the objective function
   /// @param val new lower bound
   void setLower(double val);

   /// @return the upper bound of the objective function
   double getUpper() const;

   /// Sets the upper bound of the objective function
   /// @param val new upper bound
   void setUpper(double val);

   /// @return the objective variable of this
   Variable getObjVar() const;

private:
   Variable objvar_;
   double lower_;
   double upper_;
};

/// Output on a stream
std::ostream& operator<<(std::ostream& os, const BONode& node);

/// Type of shared pointers on BO nodes
typedef std::shared_ptr<BONode> SharedBONode;

} // namespace

#endif
