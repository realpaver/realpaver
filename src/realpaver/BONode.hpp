///////////////////////////////////////////////////////////////////////////////
// This file is part of Realpaver, an interval constraint and NLP solver.    //
//                                                                           //
// Copyright (c) 2017-2022 LS2N, Nantes                                      //
//                                                                           //
// Realpaver is a software distributed WITHOUT ANY WARRANTY; read the file   //
// COPYING for information.                                                  //
///////////////////////////////////////////////////////////////////////////////

#ifndef REALPAVER_BO_NODE_HPP
#define REALPAVER_BO_NODE_HPP

#include "realpaver/IntervalVector.hpp"

namespace realpaver {

///////////////////////////////////////////////////////////////////////////////
/// This is a node of a search tree generated by a Bound Optimization solver.
///
/// A node stores the following data:
/// - an interval vector representing a region in the search space;
/// - a lower bound of the objective function in this region;
/// - an upper bound of the objective function in this region;
/// - the depth in the search tree.
///////////////////////////////////////////////////////////////////////////////
class BONode {
public:
   /// Creates a node
   /// @param X vector of domains
   BONode(const IntervalVector& X);

   /// Copy constructor
   BONode(const BONode& node);

   /// No assignment
   BONode& operator=(const BONode& node) = delete;

   /// Destructor
   ~BONode();

   /// @return the lower bound of the objective function
   double getLower() const;

   /// Sets the lower bound of the objective function
   /// @param val new lower bound
   void setLower(const double& val);

   /// @return the upper bound of the objective function
   double getUpper() const;

   /// Sets the upper bound of the objective function
   /// @param val new upper bound
   void setUpper(const double& val);

   /// @return the depth of this in the search tree
   size_t getDepth() const;

   /// Sets the depth of this in the search tree
   /// @param d new depth
   void setDepth(size_t d);

   /// Increments the depth of this
   void incrDepth();

   /// @return the vector of domains of this
   IntervalVector* getRegion() const;

private:
   IntervalVector* reg_;
   size_t depth_;
   double lower_;
   double upper_;
};

/// Output on a stream
std::ostream& operator<<(std::ostream& os, const BONode& node);

/// Type of shared pointers on BO nodes
typedef std::shared_ptr<BONode> SharedBONode;

} // namespace

#endif
