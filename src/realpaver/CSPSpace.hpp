///////////////////////////////////////////////////////////////////////////////
// This file is part of Realpaver, an interval constraint and NLP solver.    //
//                                                                           //
// Copyright (c) 2017-2022 LS2N, Nantes                                      //
//                                                                           //
// Realpaver is a software distributed WITHOUT ANY WARRANTY; read the file   //
// COPYING for information.                                                  //
///////////////////////////////////////////////////////////////////////////////

#ifndef REALPAVER_CSP_SPACE_HPP
#define REALPAVER_CSP_SPACE_HPP

#include <vector>
#include "realpaver/CSPNode.hpp"

namespace realpaver {

///////////////////////////////////////////////////////////////////////////////
/// This is the base class of spaces generated by branch-and-prune algorithms
/// for solving CSPs.
///
/// Two sorts of nodes are stored. The final nodes that are not fathomed during
/// the search (the solutions) are stored in this following a FIFO strategy.
/// The pending or unexplored nodes are managed by a strategy whose interface
/// is defined here. Concrete strategies are implemented in sub-classes.
///////////////////////////////////////////////////////////////////////////////
class CSPSpace {
public:
   /// Default constructor
   CSPSpace() = default;

   /// Virtual destructor
   virtual ~CSPSpace();

   /// No assignment
   CSPSpace& operator=(const CSPSpace&) = delete;

   /// Default copy constructor
   CSPSpace(const CSPSpace&) = default;

   /// @return the number of final nodes of this
   size_t nbFinalNodes() const;

   /// @param i a final node index with 0 <= i < nbFinalNodes()
   /// @return the i-th final node
   SharedCSPNode getFinalNode(size_t i) const;

   /// Inserts a final node in this following a FIFO strategy
   /// @para node node inserted
   void pushFinalNode(const SharedCSPNode& node);

   /// Removes the last final node from this
   /// @return the last final node
   SharedCSPNode popFinalNode();

   /// @return the number of pending nodes of this
   virtual size_t nbPendingNodes() const = 0;

   /// @return the next pending node of this
   virtual SharedCSPNode getPendingNode() const = 0;

   /// Removes the next pending node from this
   /// @return the next pending node
   virtual SharedCSPNode popPendingNode() = 0;

   /// Inserts a pending node in this
   virtual void insertPendingNode(const SharedCSPNode& node) = 0;
   
private:
   std::vector<SharedCSPNode> vnode_;   // vector of final nodes
};

} // namespace

#endif
